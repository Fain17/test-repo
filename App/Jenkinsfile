pipeline {
  agent {
    docker {
      image 'fain17/dotnet-docker:v3'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  options{
          skipDefaultCheckout(true)
      }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/Fain17/test-repo.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a dll file specify file localtion and build command 
        sh 'cd App && dotnet build -c Debug'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://13.126.151.9:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
        	sh '''
        	cd App
        	dotnet sonarscanner begin /k:"sonar" /d:sonar.login="${SONAR_AUTH_TOKEN}" /d:sonar.host.url="${SONAR_URL}"
        	dotnet build 
        	dotnet sonarscanner end /d:sonar.login="${SONAR_AUTH_TOKEN}" /d:sonar.host.url="${SONAR_URL}"
        	'''        
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "fain17/testapi-cicd:${BUILD_NUMBER}"
        					// DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'docker --version'
            sh 'cd App && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "test-repo"
            GIT_USER_NAME = "Fain17"
            
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    P_BUILD_NUMBER=$((BUILD_NUMBER - 1))
                    git config --global --add safe.directory /var/lib/jenkins/workspace/test
                    git config --global user.email "xyz@gmail.com"
                    git config --global user.name "Fain17"
                    sed -i "s/${P_BUILD_NUMBER}/${BUILD_NUMBER}/g" App-manifests/deployment.yml
                    P_BUILD_NUMBER=${BUILD_NUMBER}
                    chown -R root App-manifests/deployment.yml
                    git add App-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                   
                '''
            }
        }
    }
  }
}
